{"componentChunkName":"component---src-templates-posts-jsx","path":"/post/tag/routereusestrategy","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"373afaba-8b9f-5bdf-9bfe-f601fa725cfb","html":"<h1 id=\"-routereusestrategy\" style=\"position:relative;\"><a href=\"#-routereusestrategy\" aria-label=\" routereusestrategy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🚀 RouteReuseStrategy</h1>\n<p>Angular는 라우팅 시점마다 RoutingModule에 제공된 Routes 중 이전 페이지와 다음 페이지에 해당하는 Route 객체를 찾아 서로 비교하여 변경이 있을 때만 컴포넌트를 교체한다.</p>\n<p>동일한 Route 간 이동 시. 같은 컴포넌트가 렌더링 되며 이뤄지는 API 호출은 중복으로 판단하는 것으로 보인다. 가이드 문서에는 없지만, 이 동작은 개발자가 커스터마이징 할 수 있다.</p>\n<p>예를 들면 상세에서 목록으로 뒤로 가기로 이동했을 때는 원래 Route 설정이 달라 컴포넌트를 새로 만들어야 하지만 목록에서 상세로 진입 시점에 목록 컴포넌트 상태를 캐시 했다가 뒤로 가기 시점에 복원하여 API 호출을 줄일 수 있다.</p>\n<p>이 <a href=\"https://itnext.io/cache-components-with-angular-routereusestrategy-3e4c8b174d5f\">RouterReuseStrategy API 상세 설명</a>을 간략히 설명하면 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RouteReuseStrategy</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * 현재 이동에 컴포넌트 재사용 '여부'를 확인한다\n   * false반환 시 재사용없이 컴포넌트를 새로 만들고\n   * true를 반환하면 아래 4개의 메서드를 상황별로 호출하여 캐시 및 복원한다\n   * (캐시, 복원 로직은 직접 구현해야 한다)\n   */</span>\n  <span class=\"token keyword\">abstract</span> <span class=\"token function\">shouldReuseRoute</span><span class=\"token punctuation\">(</span>\n    future<span class=\"token operator\">:</span> ActivatedRouteSnapshot<span class=\"token punctuation\">,</span>\n    curr<span class=\"token operator\">:</span> ActivatedRouteSnapshot\n  <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n\n  <span class=\"token comment\">/**\n   * 페이지를 빠져나갈 때 현재 컴포넌트 캐시 '여부'를 반환한다\n   * false 반환 시 캐시 안해도 되는것으로 판단\n   * true 반환 시 아래 store메서드를 호출한다\n   */</span>\n  <span class=\"token keyword\">abstract</span> <span class=\"token function\">shouldDetach</span><span class=\"token punctuation\">(</span>route<span class=\"token operator\">:</span> ActivatedRouteSnapshot<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n\n  <span class=\"token comment\">/**\n   * 페이지 빠져나가기 전 상태를 캐시한다\n   * 캐시를 위해서 두 번째 인자인 DetachedRouteHandle을 어딘가에 저장하면 된다\n   */</span>\n  <span class=\"token keyword\">abstract</span> <span class=\"token function\">store</span><span class=\"token punctuation\">(</span>\n    route<span class=\"token operator\">:</span> ActivatedRouteSnapshot<span class=\"token punctuation\">,</span>\n    handle<span class=\"token operator\">:</span> DetachedRouteHandle <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n\n  <span class=\"token comment\">/**\n   * 페이지 진입 시점에 복원 '여부'를 반환한다\n   * false 반환 시 복원 안해도 되는것으로 판단\n   * true 반환 시 아래 retrieve메서드를 호출한다\n   */</span>\n  <span class=\"token keyword\">abstract</span> <span class=\"token function\">shouldAttach</span><span class=\"token punctuation\">(</span>route<span class=\"token operator\">:</span> ActivatedRouteSnapshot<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n\n  <span class=\"token comment\">/**\n   * 페이지 진입 시 캐시된 데이터를 복원한다\n   * 위에서 구현한 store 메서드 호출 시점에 어딘가에 저장했던 캐시를 반환하면 된다\n   */</span>\n  <span class=\"token keyword\">abstract</span> <span class=\"token function\">retrieve</span><span class=\"token punctuation\">(</span>route<span class=\"token operator\">:</span> ActivatedRouteSnapshot<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DetachedRouteHandle <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 인터페이스를 상속받아 최상위 NgModule에 Providing 해 주면 된다.</p>\n<p>Angular의 <a href=\"https://github.com/angular/angular/blob/5bc39f8c8d5238a9be9bd968cf18ea4b738bd6be/packages/router/src/route_reuse_strategy.ts#L65\">DefaultRouteReuseStrategy</a>는 <a href=\"https://angular.io/api/router/Route\">RouteConfig</a>가 같을 때 shouldReuseRoute의 실행 결과를 true로 반환하고 있지만. 각 메서드에서 캐시 여부(shouldDetach), 복원 여부(shouldAttach) 모두 false를 반환하고 있어 아무 일도 일어나지 않는다.</p>\n<h1 id=\"routerlink가-동작하지-않아요\" style=\"position:relative;\"><a href=\"#routerlink%EA%B0%80-%EB%8F%99%EC%9E%91%ED%95%98%EC%A7%80-%EC%95%8A%EC%95%84%EC%9A%94\" aria-label=\"routerlink가 동작하지 않아요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RouterLink가 동작하지 않아요</h1>\n<p>Angular는 앞서 설명한 대로 라우팅 전, 후의 Route 객체를 비교하여 다를 때만 컴포넌트를 교체한다. 따라서 같은 Route 객체 간 이동이라면 컴포넌트가 교체되지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'detail/:id'</span><span class=\"token punctuation\">,</span>\n    component<span class=\"token operator\">:</span> DetailComponent<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>위의 라우팅 설정에서 아래 컴포넌트의 링크 클릭해서 <code class=\"language-text\">&#39;/detail/3&#39;</code>에서 <code class=\"language-text\">&#39;/detail/12&#39;</code>로 이동했다면 같은 Route객체(정확히는 같은 ActivatedRouteSnapshot)를 비교한다.</p>\n<p>따라서 컴포넌트가 교체되지 않아 <code class=\"language-text\">ngOnInit</code> 을 비롯한 라이프사이클 메서드들이 실행되지 않는다. 만약 <code class=\"language-text\">ngOnInit</code>에서 <code class=\"language-text\">id</code>를 받아 API를 호출해 상세 데이터를 보여주도록 개발했다면 문제가 될 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token operator\">:</span> <span class=\"token string\">'app-detail'</span><span class=\"token punctuation\">,</span>\n  template<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &lt;h1>detail component&lt;/h1>\n    &lt;a routerLink=\"/detail/12\">go to '/detail/12'&lt;/a>\n    &lt;div>{{ content }}&lt;/div>\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DetailComponent</span> <span class=\"token punctuation\">{</span>\n  content <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n\n  <span class=\"token comment\">// '/detail/12'로 이동했을 때는 호출되지 않아 3번 데이터를 계속 보여준다</span>\n  <span class=\"token function\">ngOnInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>http\n      <span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/detail/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>activatedRoute<span class=\"token punctuation\">.</span>snapshot<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>아래 데모를 통해 문제를 확인해 볼 수 있다.</p>\n<div class=\"aspect-ratio\">\n  <iframe src=\"https://stackblitz.com/edit/angular-routerlink-notwork?ctl=1&embed=1&file=src/app/detail/detail.component.css&hideExplorer=1&view=preview\"></iframe>\n</div>\n<p>이런 경우 <code class=\"language-text\">ngOnInit</code>이 재실행되지 않아도 갱신되도록 스트림을 이용하여 수정하는 것이 일반적이지만. RouteReuseStrategy를 이용하여 Route 객체 비교를 커스터마이징 할 수 있고. 강제로 컴포넌트를 교체하도록 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomRouteReuseStrategy</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RouteReuseStrategy</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">shouldDetach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">route<span class=\"token operator\">:</span> ActivatedRouteSnapshot</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">store</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">route<span class=\"token operator\">:</span> ActivatedRouteSnapshot<span class=\"token punctuation\">,</span> detachedTree<span class=\"token operator\">:</span> DetachedRouteHandle</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">shouldAttach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">route<span class=\"token operator\">:</span> ActivatedRouteSnapshot</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">retrieve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">route<span class=\"token operator\">:</span> ActivatedRouteSnapshot</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">shouldReuseRoute</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">future<span class=\"token operator\">:</span> ActivatedRouteSnapshot<span class=\"token punctuation\">,</span>\n    curr<span class=\"token operator\">:</span> ActivatedRouteSnapshot</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>futureUrl<span class=\"token punctuation\">,</span> currUrl<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>future<span class=\"token punctuation\">,</span> curr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      o<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">seg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> seg<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">/**\n     * Route비교 시 둘 다 'detail'을 포함한 path라면 컴포넌트를\n     * 재사용하지 않도록 false를 반환한다.\n     */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>futureUrl<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'detail'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> currUrl<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'detail'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> future<span class=\"token punctuation\">.</span>routeConfig <span class=\"token operator\">===</span> curr<span class=\"token punctuation\">.</span>routeConfig\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>아래는 위 <code class=\"language-text\">CustomRouteReuseStrategy</code>를 이용한 강제 컴포넌트 교체의 예제이다.</p>\n<div class=\"aspect-ratio\">\n  <iframe src=\"https://stackblitz.com/edit/angular-routerlink-notwork-refactor?ctl=1&embed=1&file=src/app/custom-route-reuse-strategy.ts&hideExplorer=1&view=preview\"></iframe>\n</div>\n<h1 id=\"shouldreuseroute는-여러-번-호출된다\" style=\"position:relative;\"><a href=\"#shouldreuseroute%EB%8A%94-%EC%97%AC%EB%9F%AC-%EB%B2%88-%ED%98%B8%EC%B6%9C%EB%90%9C%EB%8B%A4\" aria-label=\"shouldreuseroute는 여러 번 호출된다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>shouldReuseRoute는 여러 번 호출된다</h1>\n<blockquote>\n<p>👀 Angular v8 버전 기준으로 작성했으나 v9 에서도 비슷하게 동작한다</p>\n</blockquote>\n<p>Angular의 <a href=\"https://angular.io/api/router/Route\">RouteConfig</a>는 재귀적으로 선언할 수 있게 되어있다. 그래서 <code class=\"language-text\">shouldReuseRoute</code>의 <code class=\"language-text\">future</code>, <code class=\"language-text\">curr</code>파라미터는 path에 대한 정보를 트리 구조로 담고 있다. 자세한 내용은 예제를 통해 파악해 보자.</p>\n<p>먼저 앱의 라우팅 설정이 아래처럼 선언되어 있다고 가정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// app-routing.module.ts</span>\n<span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'list'</span><span class=\"token punctuation\">,</span> component<span class=\"token operator\">:</span> ListComponent <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'detail/:id'</span><span class=\"token punctuation\">,</span> component<span class=\"token operator\">:</span> DetailComponent <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'delivery'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">loadChildren</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./delivery/delivery.module'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mod</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> mod<span class=\"token punctuation\">.</span>DeliveryModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// delivery-routing.module.ts</span>\n<span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'detail/:id'</span><span class=\"token punctuation\">,</span> component<span class=\"token operator\">:</span> DeliveryDetailComponent <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>아래 <code class=\"language-text\">RouteReuseStrategy</code>는 각 호출 단계에서 url과 해당 <code class=\"language-text\">Route</code>와 연결된 컴포넌트 이름을 출력한다. 이 strategy를 사용하여 위의 Route 설정에서 발생할 수 있는 이동들에 대한 호출 로그를 분석해 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomRouteReuseStrategy</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RouteReuseStrategy</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">shouldReuseRoute</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">future<span class=\"token operator\">:</span> ActivatedRouteSnapshot<span class=\"token punctuation\">,</span>\n    curr<span class=\"token operator\">:</span> ActivatedRouteSnapshot</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 분석을 위해 파라미터를 로깅함</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[future]\\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span>future<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n\\n[curr]:\\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n\\n----------</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> future<span class=\"token punctuation\">.</span>routeConfig <span class=\"token operator\">===</span> curr<span class=\"token punctuation\">.</span>routeConfig\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>1. 앱 진입</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[future]\n  → &#39;&#39; / null\n[curr]:\n  → &#39;&#39; / null\n----------</code></pre></div>\n<p>앱 진입 시점에 한번 호출된다. 큰 의미는 없다</p>\n<p><em>2. '' 에서 'list'로 이동하는 경우</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[future]\n  → &#39;&#39; / AppComponent\n  → &#39;list&#39; / ListComponent\n[curr]:\n  → &#39;&#39; / null\n----------</code></pre></div>\n<p><code class=\"language-text\">future</code>를 보면 <code class=\"language-text\">&#39;&#39;</code>는 AppComponent, <code class=\"language-text\">&#39;list&#39;</code>는 ListComponent에 제공되는 것을 알 수 있다.</p>\n<p><em>3. 'list'에서 'detail/2'로 이동하는 경우</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[future]\n  → &#39;&#39; / AppComponent\n  → &#39;detail/2&#39; / DetailComponent\n[curr]:\n  → &#39;&#39; / AppComponent\n  → &#39;list&#39; / ListComponent\n----------\n[future]\n  → &#39;list&#39; / ListComponent\n[curr]:\n  → &#39;detail/2&#39; / DetailComponent\n----------</code></pre></div>\n<ul>\n<li><code class=\"language-text\">shoudReuseRoute</code>가 두 번 호출되고 있다.</li>\n<li>이상한 점이 있는데 두 번째 호출에서는 <code class=\"language-text\">future</code>, <code class=\"language-text\">curr</code>값이 뒤바뀌었다.</li>\n<li><code class=\"language-text\">future</code>를 보면 <code class=\"language-text\">AppComponent</code>에는 <code class=\"language-text\">:id</code>에 해당하는 문자열이 없다. 라우팅 설정 자체도 그러한데. <code class=\"language-text\">AppComponent</code>가 DI 받는 <code class=\"language-text\">ActivatedRouteSnapshot</code>에서는 <code class=\"language-text\">id</code>를 가져올 수 없는 이유이기도 하다.</li>\n</ul>\n<p><em>4. 'detail/2'에서 'delivery/detail/4'로 이동하는 경우</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[future]\n  → &#39;&#39; / AppComponent\n  → &#39;delivery&#39; / null\n  → &#39;detail/4&#39; / DeliveryDetailComponent\n[curr]:\n  → &#39;&#39; / AppComponent\n  → &#39;detail/2&#39; / DetailComponent\n----------\n[future]\n  → &#39;detail/2&#39; / DetailComponent\n[curr]:\n  → &#39;delivery&#39; / null\n  → &#39;detail/4&#39; / DeliveryDetailComponent\n----------</code></pre></div>\n<ul>\n<li>3번처럼 두 번째 호출의 <code class=\"language-text\">future</code>, <code class=\"language-text\">curr</code>값이 뒤바뀌어 있다. <a href=\"https://github.com/angular/angular/issues/16192\">관련 PR</a>이 있는데 아직 별다른 업데이트가 없다.</li>\n<li>첫 shouldReuseRoute의 호출에서 <code class=\"language-text\">future</code>파라미터를 보면<code class=\"language-text\">loadChildren</code>을 사용한 <code class=\"language-text\">Route</code>에는 컴포넌트가 없다.</li>\n</ul>\n<p>두 번씩 호출되는 이유는 어디에도 나와 있지 않지만. <a href=\"https://github.com/angular/angular/blob/3e51a1998304ab6a15e5bea6bc66e7a8c636a8ad/packages/router/src/create_router_state.ts\">관련 코드</a>를 볼 때 두 번씩 호출하더라도 컴포넌트에 올바른 라우팅 상태를 줄 수 있기 때문에 따로 정리하지 않은 것으로 보인다. 따라서 구현 할 때 주의가 필요하다.</p>\n<h1 id=\"상품상세-목록-간-컴포넌트-캐싱-예제\" style=\"position:relative;\"><a href=\"#%EC%83%81%ED%92%88%EC%83%81%EC%84%B8-%EB%AA%A9%EB%A1%9D-%EA%B0%84-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%BA%90%EC%8B%B1-%EC%98%88%EC%A0%9C\" aria-label=\"상품상세 목록 간 컴포넌트 캐싱 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상품상세, 목록 간 컴포넌트 캐싱 예제</h1>\n<p>상세, 목록 페이지의 경우 상세에서 뒤로가기 시 이전에 보고 있던 목록과 스크롤을 유지하면 페이지 탐색 사용성을 크게 개선할 수 있다. 특히 전자상거래 서비스의 경우 매출과 직결되는 부분이기도 하다.</p>\n<p>캐싱을 위해 일반적으로 bfcache에 의존하거나. 상세 진입 전의 앱 상태를 persist로 저장했다가 복원하는 방법을 사용하는데. 두 방법은 코드베이스 외적인 부분에 의존하기 때문에 관리가 어렵고 사이드이펙트가 있을 수 있다.</p>\n<p>RouteReuseStrategy를 이용한 방법은 캐싱이 필요한 구간에 부분적으로 적용해야 하지만 구현이 코드베이스 안에 있으므로 앞서 언급한 문제에서 자유롭다. 가능한 이 방법을 도입하는 것이 좋아 보인다.</p>\n<div class=\"aspect-ratio\">\n  <iframe src=\"https://stackblitz.com/edit/angular-list-detail-reuse-example?ctl=1&embed=1&file=src/app/api.service.ts&hideExplorer=1&view=preview\"></iframe>\n</div>\n<p>위 데모는 상품목록 상세 예제이다. 원래라면 상세에서 뒤로 가기로 목록으로 돌아왔을 때 컴포넌트가 교체어 버리므로 화면이 깜빡이며 1번째 페이지부터 새로 그리고. 스크롤 위치도 잃어버린다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomRouteReuseStrategy</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RouteReuseStrategy</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> cache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> DetachedRouteHandle<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">shouldDetach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">route<span class=\"token operator\">:</span> ActivatedRouteSnapshot</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 목록에서 빠져나갈 때 true반환하여 store를 호출한다</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'list'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">store</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">route<span class=\"token operator\">:</span> ActivatedRouteSnapshot<span class=\"token punctuation\">,</span> detachedTree<span class=\"token operator\">:</span> DetachedRouteHandle</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 컴포넌트 상태 캐시</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> detachedTree<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">shouldAttach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">route<span class=\"token operator\">:</span> ActivatedRouteSnapshot</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 목록 재진입 시 캐시가 있다면 true반환하여 retrieve를 호출한다</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'list'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">retrieve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">route<span class=\"token operator\">:</span> ActivatedRouteSnapshot</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 컴포넌트 상태 복원</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">shouldReuseRoute</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">future<span class=\"token operator\">:</span> ActivatedRouteSnapshot<span class=\"token punctuation\">,</span>\n    curr<span class=\"token operator\">:</span> ActivatedRouteSnapshot</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> future<span class=\"token punctuation\">.</span>routeConfig <span class=\"token operator\">===</span> curr<span class=\"token punctuation\">.</span>routeConfig\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 본문에서 설명한 RouteReuseStrategy를 상속한 커스텀 클래스를 구현하면 캐시된 컨텍스트를 복원하기 때문에 상품목록 컴포넌트가 깜빡이지 않고 곧바로 렌더링 되는 것을 볼 수 있다.</p>","frontmatter":{"categories":["development","angular"],"tags":["angular","routereusestrategy"],"title":"Angular의 RouteReuseStrategy"},"fields":{"slug":"/post/angular의-routerreusestrategy","date":"2020-02-29T00:00:00.000+09:00"},"headings":[{"value":"🚀 RouteReuseStrategy","depth":1},{"value":"RouterLink가 동작하지 않아요","depth":1},{"value":"shouldReuseRoute는 여러 번 호출된다","depth":1},{"value":"상품상세, 목록 간 컴포넌트 캐싱 예제","depth":1}]}}]}},"pageContext":{"ids":["373afaba-8b9f-5bdf-9bfe-f601fa725cfb"],"pageNumber":0,"humanPageNumber":1,"skip":0,"limit":2,"numberOfPages":1,"previousPagePath":"","nextPagePath":""}}}