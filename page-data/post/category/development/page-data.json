{"componentChunkName":"component---src-templates-posts-jsx","path":"/post/category/development","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"00b84a18-10da-586d-8971-24a5774ad8ef","html":"<blockquote>\n<p>CentOS 7.7 기준으로 작성</p>\n</blockquote>\n<h1 id=\"master-slave-공통\" style=\"position:relative;\"><a href=\"#master-slave-%EA%B3%B5%ED%86%B5\" aria-label=\"master slave 공통 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Master, Slave 공통</h1>\n<p>패키지 업데이트, JDK설치</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum update\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> -y java-1.8.0-openjdk-devel <span class=\"token function\">git</span></code></pre></div>\n<p>사내망일 경우 프록시 설정 필요</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> .bash_profile\n\n<span class=\"token comment\"># 맨밑에 아래 내용 추가</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">http_proxy</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>프록시 서버 주소<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HTTP_PROXY</span><span class=\"token operator\">=</span><span class=\"token variable\">$http_proxy</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">https_proxy</span><span class=\"token operator\">=</span><span class=\"token variable\">$http_proxy</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HTTPS_PROXY</span><span class=\"token operator\">=</span><span class=\"token variable\">$http_proxy</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">no_proxy</span><span class=\"token operator\">=</span><span class=\"token string\">\"localhost,127.0.0.1\"</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">NO_PROXY</span><span class=\"token operator\">=</span><span class=\"token variable\">$no_proxy</span></code></pre></div>\n<h1 id=\"master-설정\" style=\"position:relative;\"><a href=\"#master-%EC%84%A4%EC%A0%95\" aria-label=\"master 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Master 설정</h1>\n<h2 id=\"jenkins-설치-및-포트-설정\" style=\"position:relative;\"><a href=\"#jenkins-%EC%84%A4%EC%B9%98-%EB%B0%8F-%ED%8F%AC%ED%8A%B8-%EC%84%A4%EC%A0%95\" aria-label=\"jenkins 설치 및 포트 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Jenkins 설치 및 포트 설정</h2>\n<p><a href=\"https://linuxize.com/post/how-to-install-jenkins-on-centos-7\">https://linuxize.com/post/how-to-install-jenkins-on-centos-7</a> 참고.</p>\n<p>80포트로 사용할 수 있도록 설정</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> -i\niptables -A PREROUTING -t nat -i eth0 -p tcp --dport <span class=\"token number\">80</span> -j REDIRECT --to-port <span class=\"token number\">8080</span>\niptables-save</code></pre></div>\n<p>jenkins계정 패스워드 삭제 및 로그인 가능하게 하기</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> -i\n<span class=\"token function\">passwd</span> -d jenkins\n<span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> /etc/passwd\n\n<span class=\"token comment\"># jenkins 라인 마지막 /bin/false를 /bin/bash로 변경</span></code></pre></div>\n<h2 id=\"인증-키-설정\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%A6%9D-%ED%82%A4-%EC%84%A4%EC%A0%95\" aria-label=\"인증 키 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인증 키 설정</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">su</span> - jenkins\n<span class=\"token function\">mkdir</span> .ssh\n<span class=\"token builtin class-name\">cd</span> .ssh\nssh-keygen\n\n<span class=\"token comment\"># id_rsa, id_rsa.pub생성됨</span></code></pre></div>\n<p>github.com 로그인 후 <code class=\"language-text\">Settings &gt; Developer settings &gt; Personal access tokens</code> 에서 새 토큰을 등록하고 이 값을 Jenkins 의 Crediential 에 Secret text 로 등록해둔다</p>\n<h2 id=\"플러그인-설치-및-설정\" style=\"position:relative;\"><a href=\"#%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%84%A4%EC%A0%95\" aria-label=\"플러그인 설치 및 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>플러그인 설치 및 설정</h2>\n<p>아래 플러그인들 설치</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">NodeJS, AnsiColor, GitHub Pull Request Builder, Publish Over SSH</code></pre></div>\n<p><code class=\"language-text\">Jenkins 관리 &gt; Global Tool Configuration &gt; NodeJS</code> 항목 추가</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Name: NodeJS 10.15.3\nVersion: NodeJS 10.15.3\nGlobal npm packages to install: typescript@3.5.3 ts-node@8.8.2 @angular/cli@8.2.0 @sentry/cli@1.52.1</code></pre></div>\n<p>각 전역 패키지들의 버전을 명시해 두는게 좋음</p>\n<p>사내 npm을 사용중이라면 <code class=\"language-text\">Jenkins 관리 &gt; Managed Files &gt; Npm config file</code> 을 추가하여 설정.</p>\n<h2 id=\"환경변수-설정\" style=\"position:relative;\"><a href=\"#%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98-%EC%84%A4%EC%A0%95\" aria-label=\"환경변수 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>환경변수 설정</h2>\n<p><code class=\"language-text\">Jenkins 관리 &gt; 시스템 설정 &gt; Global properties &gt; Environment variables</code> 에 아래 값들 추가</p>\n<p>위의 두 값은 언어 설정때문에 필요하고. 아래 프록시 설정은 해당할때만 추가한다</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">이름: JAVA_TOOLS_OPTIONS\n값: -Dfile.encoding=UTF-8\n\n이름: LANG\n값: ko_KR.UTF-8\n\n이름: HTTP_PROXY\n값: 프록시 주소\n\n이름: HTTPS_PROXY\n값: 프록시 주소\n\n이름: NO_PROXY\n값: 프록시 타면 안되는 도메인들</code></pre></div>\n<h1 id=\"slave-설정\" style=\"position:relative;\"><a href=\"#slave-%EC%84%A4%EC%A0%95\" aria-label=\"slave 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Slave 설정</h1>\n<p>jenkins 계성 생성 및 패스워드 삭제</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> i\n<span class=\"token function\">useradd</span> -d /var/lib/jenkins jenkins\n<span class=\"token function\">passwd</span> -d jenkins\n<span class=\"token builtin class-name\">exit</span></code></pre></div>\n<p>jenkins 계정에 ssh 키 추가후 Master 노드가 접근할 수 있도록 등록</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">su</span> - jenkins\n<span class=\"token function\">mkdir</span> .ssh\n<span class=\"token builtin class-name\">cd</span> .ssh\n<span class=\"token function\">vim</span> authorized_keys\n\n<span class=\"token comment\"># Master 노드의 인증서 설정에서 만든 id_rsa.pub의 컨텐츠를 붙여넣고 저장</span></code></pre></div>","frontmatter":{"categories":["development"],"tags":["jenkins"],"title":"FrontEnd 개발을 위한 Jenkins CI서버 세팅하기"},"fields":{"slug":"/post/frontend-개발을-위한-jenkins설치","date":"2020-04-17T00:00:00.000+09:00"},"headings":[{"value":"Master, Slave 공통","depth":1},{"value":"Master 설정","depth":1},{"value":"Jenkins 설치 및 포트 설정","depth":2},{"value":"인증 키 설정","depth":2},{"value":"플러그인 설치 및 설정","depth":2},{"value":"환경변수 설정","depth":2},{"value":"Slave 설정","depth":1}]}},{"node":{"id":"2f249d12-de77-5f0b-b4a2-560c9aa25d5d","html":"<p>신입땐 명세를 만족하는 코드를 빠르게 작성하는게 최고인 줄만 알았다.</p>\n<p>하지만 5년차쯤 되었을 때 이 생각에 문제가 있다는 것을 깨달았다.</p>\n<p>복잡한 요구사항을 만족하는 코드도 보기 좋게 작성할 수 있다.</p>\n<p>이 글에서 코드를 어떻게 작성해야 하는지에 대한 여러 생각들과 자료들을 정리해 본다.</p>\n<h2 id=\"불필요한-것들을-빼자\" style=\"position:relative;\"><a href=\"#%EB%B6%88%ED%95%84%EC%9A%94%ED%95%9C-%EA%B2%83%EB%93%A4%EC%9D%84-%EB%B9%BC%EC%9E%90\" aria-label=\"불필요한 것들을 빼자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>불필요한 것들을 빼자</h2>\n<p>좋은 코드는 딱 필요한 만큼의 텍스트로만 작성되어 있다.</p>\n<p>한 파일 안에 함수만 있다고 우습게 볼 것이 아닌데, 그렇게 생각하는 개발자를 본 적이 있다.</p>\n<p>오히려 함수 하나면 되는데 클래스 이상을 동원하는 개발자가 이상한 것이다.</p>\n<p>함수 하나면 순수함수가 되는 경향이 있고. 테스트도 쉬워진다.</p>\n<p>이와 관련해서는 Kyle Simpson의 <a href=\"https://youtu.be/wJEX2FgNYLg\">The Economy of Keystrokes</a>를 보면 좋은데.</p>\n<p>키 스트로크는 돈과 같아서 가성비를 따져야 하고.</p>\n<p>사용한다면 가독성과 기능을 위해서만 사용해야 한다는 내용이다. 꼭 보길 바란다.</p>\n<h2 id=\"완성된-것들을-조합하자\" style=\"position:relative;\"><a href=\"#%EC%99%84%EC%84%B1%EB%90%9C-%EA%B2%83%EB%93%A4%EC%9D%84-%EC%A1%B0%ED%95%A9%ED%95%98%EC%9E%90\" aria-label=\"완성된 것들을 조합하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>완성된 것들을 조합하자</h2>\n<p>리눅스의 쉘은 수 많은 완성된 명령 행 도구를 조합 사용하여 목적을 달성하게 되어 있다.</p>\n<p>특정 파일들을 백업하는 경우 tar 명령어로 대상 파일들을 묶은 다음 ftp 명령어를 통해 업로드 한다.</p>\n<p>압축파일이 생성되어 있지 않다면? tar명령어의 문제일 것이다.</p>\n<p>압축파일은 있는데 업로드가 되지 않았다면? ftp를 포함한 네트워크의 문제일 것이다.</p>\n<p>각 도구들의 역할이 명확하기 때문에 현상만으로 대략적인 문제를 파악할 수 있다.</p>\n<p>이는 단위테스트가 추구하는 바 와도 일맥상통한다.</p>\n<p>만약 모든 기능을 한번에 수행하는 함수를 작성했다면 함수 전체를 라인단위로 디버깅해야 하는데.</p>\n<p>이런 코드가 많아질수록 유지보수하기 어렵게 된다. 아래 예제를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * path의 노드 중 pattern에 일치하는 노드들을 삭제함\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">deleteNodes</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path<span class=\"token punctuation\">,</span> pattern</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> dirent <span class=\"token keyword\">of</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">opendirSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dirent<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      fs<span class=\"token punctuation\">.</span><span class=\"token function\">unlinkSync</span><span class=\"token punctuation\">(</span>dirent<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드는 아래처럼 리펙토링 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * path의 하위 노드들을 조회함\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getNodes</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">opendirSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * pattern일치 노드를 제거함\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">deleteIfMatched</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> pattern</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">unlinkSync</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * path의 노드 중 pattern에 일치하는 노드들을 삭제함\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">deleteNodes</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path<span class=\"token punctuation\">,</span> pattern</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> node <span class=\"token keyword\">of</span> <span class=\"token function\">getNodes</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">deleteIfMatched</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> pattern<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같은 방식의 리펙토링을 하면 다음과 같은 장점이 있다.</p>\n<ol>\n<li>\n<p>가독성</p>\n<ul>\n<li><em>리펙토링 이전:</em> 표현식과 문이 섞여 코드가 한 눈에 들어오지 않는다.</li>\n<li><em>리펙토링 이후:</em> 복잡한 식들이 적절한 이름의 메서드로 표현되어 마치 책을 읽는 것 처럼 코드가 읽힌다.</li>\n</ul>\n</li>\n<li>\n<p>테스트 용이성</p>\n<ul>\n<li><em>리펙토링 이전:</em> <code class=\"language-text\">deleteNodes</code>를 테스트하려면 한번에 여러 API Mock을 만들어야 하는 부담이 있다.</li>\n<li><em>리펙토링 이후:</em> getNodes는 NodeJS의 API를 단순히 이용할 뿐이므로. 테스트하지 않아도 된다. 하나의 메서드에 섞여있던 테스트 포인트가 <code class=\"language-text\">deleteIfMatched</code>, <code class=\"language-text\">deleteNodes</code>로 나뉘었다. 그리고 각 메서드를 테스트하기 위한 Mock제공이 상대적으로 덜 부담스럽다.</li>\n</ul>\n</li>\n<li>\n<p>확장성</p>\n<ul>\n<li><em>리펙토링 이전:</em> <code class=\"language-text\">copyNodes</code>를 추가해야 한다면 리펙토링 이전은 주요 로직을 복사하고 요구사항에 맞게 수정해야 한다. 이 경우 전체 코드량이 2배가 되므로 테스트 커버리지가 감소한다.</li>\n<li><em>리펙토링 이후:</em> 비슷한 레벨의 <code class=\"language-text\">copyIfMatched</code> 함수와 <code class=\"language-text\">copyNodes</code>만 추가 구현하면 된다. 테스트 커버리지를 상대적으로 적게 감소시키며 코드를 확장할 수 있게 된다.</li>\n</ul>\n</li>\n</ol>\n<p>... 작성중입니다 ...</p>","frontmatter":{"categories":["development"],"tags":["refactoring"],"title":"좋은 코드를 작성하기 위한 생각들"},"fields":{"slug":"/post/좋은-코드를-위한-생각들","date":"2020-04-09T00:00:00.000+09:00"},"headings":[{"value":"불필요한 것들을 빼자","depth":2},{"value":"완성된 것들을 조합하자","depth":2}]}},{"node":{"id":"d1a599fc-7122-5745-b07f-703ef178324a","html":"<h2 id=\"capslock과-control키-바꾸기\" style=\"position:relative;\"><a href=\"#capslock%EA%B3%BC-control%ED%82%A4-%EB%B0%94%EA%BE%B8%EA%B8%B0\" aria-label=\"capslock과 control키 바꾸기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CapsLock과 Control키 바꾸기</h2>\n<p>처음에는 게임과 영화를 보기 위한 용도로 데스크탑을 조립했는데 이제는 개발도구로 사용하고 있다. Window는 터미널을 사용할 때의 제약이 많아 개발할때는 꺼렸는데 wsl의 등장으로 지금은 현업에서도 큰 불편 없이 사용할 수 있는 정도가 되었다.</p>\n<p>특히 vscode의 wsl 플러그인을 사용하면 wsl의 리눅스 파일시스템에 있는 프로젝트들을 마치 호스트의 파일시스템에 있는 것 처럼 사용할 수 있어서 집에서는 이제 맥북으로 개발하지 않을 것 같다. 다만 몇 가지 불편한 부분이 있었다.</p>\n<p>첫번째는 <code class=\"language-text\">Capslock</code>키와 <code class=\"language-text\">Control</code>키의 위치였다. 해피해킹 키보드에 익숙해져 <code class=\"language-text\">Control</code>대신 <code class=\"language-text\">Capslock</code>을 마구 눌러댔다. 윈도우에서 이를 해결할 수 있는 방법은 두가지가 있다. 첫번째로 레지스트리를 수정하는 방법인데. 대부분의 프로그램에서는 잘 동작하지만 특정 게임들 (몬스터 헌터, 토탈워 삼국)에서는 <code class=\"language-text\">Control</code>키를 아예 누를 수 없는 상태가 되어 버린다.</p>\n<p>두 번째는 <a href=\"https://www.autohotkey.com/\">AutoHotKey</a>를 사용하는 것이다. 이 방법으로 지금까지 만족스럽게 사용하고 있다. 사이트에서 프로그램을 설치하고 바탕화면에 우클릭 후 <strong>'새로 만들기'</strong> > <strong>'AutoHotkey Script'</strong>를 선택한 후 생성된 파일에 아래 내용을 붙여 넣고 저장한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">; CapsLock, Control 전환\nCapsLock::Ctrl\nCtrl::CapsLock</code></pre></div>\n<p>다음 해당 파일을 우클릭하여 <strong>'Run Script'</strong>로 실행한다. 시스템 트레이 아이콘에 'H'아이콘이 나타나면 된 것이다. 그럼 이제 <code class=\"language-text\">Capslock</code>과 <code class=\"language-text\">Control</code>이 바뀌었을 것이다. 이 동작은 언제까지나 스크립트가 실행되어 있는 상태만 유효하다.</p>\n<h2 id=\"수정모드를-빠져나갈-때-영문으로-전환하기\" style=\"position:relative;\"><a href=\"#%EC%88%98%EC%A0%95%EB%AA%A8%EB%93%9C%EB%A5%BC-%EB%B9%A0%EC%A0%B8%EB%82%98%EA%B0%88-%EB%95%8C-%EC%98%81%EB%AC%B8%EC%9C%BC%EB%A1%9C-%EC%A0%84%ED%99%98%ED%95%98%EA%B8%B0\" aria-label=\"수정모드를 빠져나갈 때 영문으로 전환하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>수정모드를 빠져나갈 때 영문으로 전환하기</h2>\n<p>이전에 Spacemacs를 사용할 땐 에디터 내장 언어 입력기가 존재하여 수정모드를 빠져나갈 때 자동으로 영문으로 바꿔 주었는데. 이 기능이 정말 편리했다. VSCODE를 사용한 뒤로는 그 기능을 쓸 수 없어 <code class=\"language-text\">Esc</code>로 수정모드를 빠져나온 후 항상 언어 전환 키를 눌러줘야만 했다.</p>\n<p>이 문제를 해결하기 위한 <a href=\"https://github.com/daipeihust/im-select\">설정</a>이 있긴 하지만 이게 IME입력기를 쓰는 환경에서는 잘 동작하지 않는다. 이 문제도 AutoHotKey를 이용해 해결할 수 있었다. 위에서 했던 방법과 마찬가지로 아래 스크립트를 쓰면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">; vscode에서 vim insert 모드 종료시 한글이면 영문으로 전환\n#IfWinActive, ahk_exe Code.exe\nEscape::\n\tif (ImeCheck(&quot;A&quot;) = 1)\n\t\tSend {vk15sc138}\n\tSend {Escape}\nReturn\n#IfWinActive\n\n; 키보드 언어 상태 확인 1이면 한글 0이면 영문\nImeCheck(WinTitle) {\n\tWinGet,hWnd,ID,%WinTitle%\n\tReturn SendImeControl(ImmGetDefaultIMEWnd(hWnd),0x005,&quot;&quot;)\n}\nSendImeControl(DefaultIMEWnd, wParam, lParam) {\n\tDetectSave := A_DetectHiddenWindows\n\tDetectHiddenWindows,ON\n\tSendMessage 0x283, wParam,lParam,,ahk_id %DefaultIMEWnd%\n\tif (DetectSave &lt;&gt; A_DetectHiddenWindows)\n\t\tDetectHiddenWindows,%DetectSave%\n\treturn ErrorLevel\n}\nImmGetDefaultIMEWnd(hWnd) {\n\treturn DllCall(&quot;imm32\\ImmGetDefaultIMEWnd&quot;, Uint,hWnd, Uint)\n}</code></pre></div>\n<p>그럼 이제 매 부팅시마다 위의 스크립트들이 자동실행만 되면 된다. 방법은 스크립트 파일 우클릭 후 <strong>'Compile Script'</strong>를 선택한다. 그럼 같은 경로에 exe파일이 생겼을 것이다. 이제 Window의 시작 버튼에 우클릭 후 <strong>'실행'</strong> 을 열고 거기에 <code class=\"language-text\">shell:startup</code>을 입력하고 <strong>'열기'</strong> 를 누른다.</p>\n<p>그럼 폴더가 하나 뜨는데 여기에 exe파일들을 넣으면 된다. 참고로 위의 두 스크립트를 하나의 파일에 넣어도 된다.</p>","frontmatter":{"categories":["development"],"tags":["vscode","autohotkey"],"title":"Windows에서 VS Code vim플러그인 자동 한영전환"},"fields":{"slug":"/post/Windows에서-VS-Code-vim플러그인-자동-한영전환","date":"2020-03-13T00:00:00.000+09:00"},"headings":[{"value":"CapsLock과 Control키 바꾸기","depth":2},{"value":"수정모드를 빠져나갈 때 영문으로 전환하기","depth":2}]}},{"node":{"id":"373afaba-8b9f-5bdf-9bfe-f601fa725cfb","html":"<h1 id=\"-routereusestrategy\" style=\"position:relative;\"><a href=\"#-routereusestrategy\" aria-label=\" routereusestrategy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🚀 RouteReuseStrategy</h1>\n<p>Angular는 라우팅 시점마다 RoutingModule에 제공된 Routes 중 이전 페이지와 다음 페이지에 해당하는 Route 객체를 찾아 서로 비교하여 변경이 있을 때만 컴포넌트를 교체한다.</p>\n<p>동일한 Route 간 이동 시. 같은 컴포넌트가 렌더링 되며 이뤄지는 API 호출은 중복으로 판단하는 것으로 보인다. 가이드 문서에는 없지만, 이 동작은 개발자가 커스터마이징 할 수 있다.</p>\n<p>예를 들면 상세에서 목록으로 뒤로 가기로 이동했을 때는 원래 Route 설정이 달라 컴포넌트를 새로 만들어야 하지만 목록에서 상세로 진입 시점에 목록 컴포넌트 상태를 캐시 했다가 뒤로 가기 시점에 복원하여 API 호출을 줄일 수 있다.</p>\n<p>이 <a href=\"https://itnext.io/cache-components-with-angular-routereusestrategy-3e4c8b174d5f\">RouterReuseStrategy API 상세 설명</a>을 간략히 설명하면 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RouteReuseStrategy</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * 현재 이동에 컴포넌트 재사용 '여부'를 확인한다\n   * false반환 시 재사용없이 컴포넌트를 새로 만들고\n   * true를 반환하면 아래 4개의 메서드를 상황별로 호출하여 캐시 및 복원한다\n   * (캐시, 복원 로직은 직접 구현해야 한다)\n   */</span>\n  <span class=\"token keyword\">abstract</span> <span class=\"token function\">shouldReuseRoute</span><span class=\"token punctuation\">(</span>\n    future<span class=\"token operator\">:</span> ActivatedRouteSnapshot<span class=\"token punctuation\">,</span>\n    curr<span class=\"token operator\">:</span> ActivatedRouteSnapshot\n  <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n\n  <span class=\"token comment\">/**\n   * 페이지를 빠져나갈 때 현재 컴포넌트 캐시 '여부'를 반환한다\n   * false 반환 시 캐시 안해도 되는것으로 판단\n   * true 반환 시 아래 store메서드를 호출한다\n   */</span>\n  <span class=\"token keyword\">abstract</span> <span class=\"token function\">shouldDetach</span><span class=\"token punctuation\">(</span>route<span class=\"token operator\">:</span> ActivatedRouteSnapshot<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n\n  <span class=\"token comment\">/**\n   * 페이지 빠져나가기 전 상태를 캐시한다\n   * 캐시를 위해서 두 번째 인자인 DetachedRouteHandle을 어딘가에 저장하면 된다\n   */</span>\n  <span class=\"token keyword\">abstract</span> <span class=\"token function\">store</span><span class=\"token punctuation\">(</span>\n    route<span class=\"token operator\">:</span> ActivatedRouteSnapshot<span class=\"token punctuation\">,</span>\n    handle<span class=\"token operator\">:</span> DetachedRouteHandle <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n\n  <span class=\"token comment\">/**\n   * 페이지 진입 시점에 복원 '여부'를 반환한다\n   * false 반환 시 복원 안해도 되는것으로 판단\n   * true 반환 시 아래 retrieve메서드를 호출한다\n   */</span>\n  <span class=\"token keyword\">abstract</span> <span class=\"token function\">shouldAttach</span><span class=\"token punctuation\">(</span>route<span class=\"token operator\">:</span> ActivatedRouteSnapshot<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n\n  <span class=\"token comment\">/**\n   * 페이지 진입 시 캐시된 데이터를 복원한다\n   * 위에서 구현한 store 메서드 호출 시점에 어딘가에 저장했던 캐시를 반환하면 된다\n   */</span>\n  <span class=\"token keyword\">abstract</span> <span class=\"token function\">retrieve</span><span class=\"token punctuation\">(</span>route<span class=\"token operator\">:</span> ActivatedRouteSnapshot<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> DetachedRouteHandle <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 인터페이스를 상속받아 최상위 NgModule에 Providing 해 주면 된다.</p>\n<p>Angular의 <a href=\"https://github.com/angular/angular/blob/5bc39f8c8d5238a9be9bd968cf18ea4b738bd6be/packages/router/src/route_reuse_strategy.ts#L65\">DefaultRouteReuseStrategy</a>는 <a href=\"https://angular.io/api/router/Route\">RouteConfig</a>가 같을 때 shouldReuseRoute의 실행 결과를 true로 반환하고 있지만. 각 메서드에서 캐시 여부(shouldDetach), 복원 여부(shouldAttach) 모두 false를 반환하고 있어 아무 일도 일어나지 않는다.</p>\n<h1 id=\"routerlink가-동작하지-않아요\" style=\"position:relative;\"><a href=\"#routerlink%EA%B0%80-%EB%8F%99%EC%9E%91%ED%95%98%EC%A7%80-%EC%95%8A%EC%95%84%EC%9A%94\" aria-label=\"routerlink가 동작하지 않아요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RouterLink가 동작하지 않아요</h1>\n<p>Angular는 앞서 설명한 대로 라우팅 전, 후의 Route 객체를 비교하여 다를 때만 컴포넌트를 교체한다. 따라서 같은 Route 객체 간 이동이라면 컴포넌트가 교체되지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'detail/:id'</span><span class=\"token punctuation\">,</span>\n    component<span class=\"token operator\">:</span> DetailComponent<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>위의 라우팅 설정에서 아래 컴포넌트의 링크 클릭해서 <code class=\"language-text\">&#39;/detail/3&#39;</code>에서 <code class=\"language-text\">&#39;/detail/12&#39;</code>로 이동했다면 같은 Route객체(정확히는 같은 ActivatedRouteSnapshot)를 비교한다.</p>\n<p>따라서 컴포넌트가 교체되지 않아 <code class=\"language-text\">ngOnInit</code> 을 비롯한 라이프사이클 메서드들이 실행되지 않는다. 만약 <code class=\"language-text\">ngOnInit</code>에서 <code class=\"language-text\">id</code>를 받아 API를 호출해 상세 데이터를 보여주도록 개발했다면 문제가 될 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token operator\">:</span> <span class=\"token string\">'app-detail'</span><span class=\"token punctuation\">,</span>\n  template<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &lt;h1>detail component&lt;/h1>\n    &lt;a routerLink=\"/detail/12\">go to '/detail/12'&lt;/a>\n    &lt;div>{{ content }}&lt;/div>\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DetailComponent</span> <span class=\"token punctuation\">{</span>\n  content <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n\n  <span class=\"token comment\">// '/detail/12'로 이동했을 때는 호출되지 않아 3번 데이터를 계속 보여준다</span>\n  <span class=\"token function\">ngOnInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>http\n      <span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/detail/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>activatedRoute<span class=\"token punctuation\">.</span>snapshot<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>아래 데모를 통해 문제를 확인해 볼 수 있다.</p>\n<div class=\"aspect-ratio\">\n  <iframe src=\"https://stackblitz.com/edit/angular-routerlink-notwork?ctl=1&embed=1&file=src/app/detail/detail.component.css&hideExplorer=1&view=preview\"></iframe>\n</div>\n<p>이런 경우 <code class=\"language-text\">ngOnInit</code>이 재실행되지 않아도 갱신되도록 스트림을 이용하여 수정하는 것이 일반적이지만. RouteReuseStrategy를 이용하여 Route 객체 비교를 커스터마이징 할 수 있고. 강제로 컴포넌트를 교체하도록 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomRouteReuseStrategy</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RouteReuseStrategy</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">shouldDetach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">route<span class=\"token operator\">:</span> ActivatedRouteSnapshot</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">store</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">route<span class=\"token operator\">:</span> ActivatedRouteSnapshot<span class=\"token punctuation\">,</span> detachedTree<span class=\"token operator\">:</span> DetachedRouteHandle</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">shouldAttach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">route<span class=\"token operator\">:</span> ActivatedRouteSnapshot</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">retrieve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">route<span class=\"token operator\">:</span> ActivatedRouteSnapshot</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">shouldReuseRoute</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">future<span class=\"token operator\">:</span> ActivatedRouteSnapshot<span class=\"token punctuation\">,</span>\n    curr<span class=\"token operator\">:</span> ActivatedRouteSnapshot</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>futureUrl<span class=\"token punctuation\">,</span> currUrl<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>future<span class=\"token punctuation\">,</span> curr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      o<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">seg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> seg<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">/**\n     * Route비교 시 둘 다 'detail'을 포함한 path라면 컴포넌트를\n     * 재사용하지 않도록 false를 반환한다.\n     */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>futureUrl<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'detail'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> currUrl<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'detail'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> future<span class=\"token punctuation\">.</span>routeConfig <span class=\"token operator\">===</span> curr<span class=\"token punctuation\">.</span>routeConfig\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>아래는 위 <code class=\"language-text\">CustomRouteReuseStrategy</code>를 이용한 강제 컴포넌트 교체의 예제이다.</p>\n<div class=\"aspect-ratio\">\n  <iframe src=\"https://stackblitz.com/edit/angular-routerlink-notwork-refactor?ctl=1&embed=1&file=src/app/custom-route-reuse-strategy.ts&hideExplorer=1&view=preview\"></iframe>\n</div>\n<h1 id=\"shouldreuseroute는-여러-번-호출된다\" style=\"position:relative;\"><a href=\"#shouldreuseroute%EB%8A%94-%EC%97%AC%EB%9F%AC-%EB%B2%88-%ED%98%B8%EC%B6%9C%EB%90%9C%EB%8B%A4\" aria-label=\"shouldreuseroute는 여러 번 호출된다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>shouldReuseRoute는 여러 번 호출된다</h1>\n<blockquote>\n<p>👀 Angular v8 버전 기준으로 작성했으나 v9 에서도 비슷하게 동작한다</p>\n</blockquote>\n<p>Angular의 <a href=\"https://angular.io/api/router/Route\">RouteConfig</a>는 재귀적으로 선언할 수 있게 되어있다. 그래서 <code class=\"language-text\">shouldReuseRoute</code>의 <code class=\"language-text\">future</code>, <code class=\"language-text\">curr</code>파라미터는 path에 대한 정보를 트리 구조로 담고 있다. 자세한 내용은 예제를 통해 파악해 보자.</p>\n<p>먼저 앱의 라우팅 설정이 아래처럼 선언되어 있다고 가정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// app-routing.module.ts</span>\n<span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'list'</span><span class=\"token punctuation\">,</span> component<span class=\"token operator\">:</span> ListComponent <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'detail/:id'</span><span class=\"token punctuation\">,</span> component<span class=\"token operator\">:</span> DetailComponent <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'delivery'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">loadChildren</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./delivery/delivery.module'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mod</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> mod<span class=\"token punctuation\">.</span>DeliveryModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// delivery-routing.module.ts</span>\n<span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'detail/:id'</span><span class=\"token punctuation\">,</span> component<span class=\"token operator\">:</span> DeliveryDetailComponent <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>아래 <code class=\"language-text\">RouteReuseStrategy</code>는 각 호출 단계에서 url과 해당 <code class=\"language-text\">Route</code>와 연결된 컴포넌트 이름을 출력한다. 이 strategy를 사용하여 위의 Route 설정에서 발생할 수 있는 이동들에 대한 호출 로그를 분석해 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomRouteReuseStrategy</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RouteReuseStrategy</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">shouldReuseRoute</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">future<span class=\"token operator\">:</span> ActivatedRouteSnapshot<span class=\"token punctuation\">,</span>\n    curr<span class=\"token operator\">:</span> ActivatedRouteSnapshot</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 분석을 위해 파라미터를 로깅함</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[future]\\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span>future<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n\\n[curr]:\\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n\\n----------</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> future<span class=\"token punctuation\">.</span>routeConfig <span class=\"token operator\">===</span> curr<span class=\"token punctuation\">.</span>routeConfig\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>1. 앱 진입</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[future]\n  → &#39;&#39; / null\n[curr]:\n  → &#39;&#39; / null\n----------</code></pre></div>\n<p>앱 진입 시점에 한번 호출된다. 큰 의미는 없다</p>\n<p><em>2. '' 에서 'list'로 이동하는 경우</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[future]\n  → &#39;&#39; / AppComponent\n  → &#39;list&#39; / ListComponent\n[curr]:\n  → &#39;&#39; / null\n----------</code></pre></div>\n<p><code class=\"language-text\">future</code>를 보면 <code class=\"language-text\">&#39;&#39;</code>는 AppComponent, <code class=\"language-text\">&#39;list&#39;</code>는 ListComponent에 제공되는 것을 알 수 있다.</p>\n<p><em>3. 'list'에서 'detail/2'로 이동하는 경우</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[future]\n  → &#39;&#39; / AppComponent\n  → &#39;detail/2&#39; / DetailComponent\n[curr]:\n  → &#39;&#39; / AppComponent\n  → &#39;list&#39; / ListComponent\n----------\n[future]\n  → &#39;list&#39; / ListComponent\n[curr]:\n  → &#39;detail/2&#39; / DetailComponent\n----------</code></pre></div>\n<ul>\n<li><code class=\"language-text\">shoudReuseRoute</code>가 두 번 호출되고 있다.</li>\n<li>이상한 점이 있는데 두 번째 호출에서는 <code class=\"language-text\">future</code>, <code class=\"language-text\">curr</code>값이 뒤바뀌었다.</li>\n<li><code class=\"language-text\">future</code>를 보면 <code class=\"language-text\">AppComponent</code>에는 <code class=\"language-text\">:id</code>에 해당하는 문자열이 없다. 라우팅 설정 자체도 그러한데. <code class=\"language-text\">AppComponent</code>가 DI 받는 <code class=\"language-text\">ActivatedRouteSnapshot</code>에서는 <code class=\"language-text\">id</code>를 가져올 수 없는 이유이기도 하다.</li>\n</ul>\n<p><em>4. 'detail/2'에서 'delivery/detail/4'로 이동하는 경우</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[future]\n  → &#39;&#39; / AppComponent\n  → &#39;delivery&#39; / null\n  → &#39;detail/4&#39; / DeliveryDetailComponent\n[curr]:\n  → &#39;&#39; / AppComponent\n  → &#39;detail/2&#39; / DetailComponent\n----------\n[future]\n  → &#39;detail/2&#39; / DetailComponent\n[curr]:\n  → &#39;delivery&#39; / null\n  → &#39;detail/4&#39; / DeliveryDetailComponent\n----------</code></pre></div>\n<ul>\n<li>3번처럼 두 번째 호출의 <code class=\"language-text\">future</code>, <code class=\"language-text\">curr</code>값이 뒤바뀌어 있다. <a href=\"https://github.com/angular/angular/issues/16192\">관련 PR</a>이 있는데 아직 별다른 업데이트가 없다.</li>\n<li>첫 shouldReuseRoute의 호출에서 <code class=\"language-text\">future</code>파라미터를 보면<code class=\"language-text\">loadChildren</code>을 사용한 <code class=\"language-text\">Route</code>에는 컴포넌트가 없다.</li>\n</ul>\n<p>두 번씩 호출되는 이유는 어디에도 나와 있지 않지만. <a href=\"https://github.com/angular/angular/blob/3e51a1998304ab6a15e5bea6bc66e7a8c636a8ad/packages/router/src/create_router_state.ts\">관련 코드</a>를 볼 때 두 번씩 호출하더라도 컴포넌트에 올바른 라우팅 상태를 줄 수 있기 때문에 따로 정리하지 않은 것으로 보인다. 따라서 구현 할 때 주의가 필요하다.</p>\n<h1 id=\"상품상세-목록-간-컴포넌트-캐싱-예제\" style=\"position:relative;\"><a href=\"#%EC%83%81%ED%92%88%EC%83%81%EC%84%B8-%EB%AA%A9%EB%A1%9D-%EA%B0%84-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%BA%90%EC%8B%B1-%EC%98%88%EC%A0%9C\" aria-label=\"상품상세 목록 간 컴포넌트 캐싱 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상품상세, 목록 간 컴포넌트 캐싱 예제</h1>\n<p>상세, 목록 페이지의 경우 상세에서 뒤로가기 시 이전에 보고 있던 목록과 스크롤을 유지하면 페이지 탐색 사용성을 크게 개선할 수 있다. 특히 전자상거래 서비스의 경우 매출과 직결되는 부분이기도 하다.</p>\n<p>캐싱을 위해 일반적으로 bfcache에 의존하거나. 상세 진입 전의 앱 상태를 persist로 저장했다가 복원하는 방법을 사용하는데. 두 방법은 코드베이스 외적인 부분에 의존하기 때문에 관리가 어렵고 사이드이펙트가 있을 수 있다.</p>\n<p>RouteReuseStrategy를 이용한 방법은 캐싱이 필요한 구간에 부분적으로 적용해야 하지만 구현이 코드베이스 안에 있으므로 앞서 언급한 문제에서 자유롭다. 가능한 이 방법을 도입하는 것이 좋아 보인다.</p>\n<div class=\"aspect-ratio\">\n  <iframe src=\"https://stackblitz.com/edit/angular-list-detail-reuse-example?ctl=1&embed=1&file=src/app/api.service.ts&hideExplorer=1&view=preview\"></iframe>\n</div>\n<p>위 데모는 상품목록 상세 예제이다. 원래라면 상세에서 뒤로 가기로 목록으로 돌아왔을 때 컴포넌트가 교체어 버리므로 화면이 깜빡이며 1번째 페이지부터 새로 그리고. 스크롤 위치도 잃어버린다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomRouteReuseStrategy</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RouteReuseStrategy</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> cache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> DetachedRouteHandle<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">shouldDetach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">route<span class=\"token operator\">:</span> ActivatedRouteSnapshot</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 목록에서 빠져나갈 때 true반환하여 store를 호출한다</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'list'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">store</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">route<span class=\"token operator\">:</span> ActivatedRouteSnapshot<span class=\"token punctuation\">,</span> detachedTree<span class=\"token operator\">:</span> DetachedRouteHandle</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 컴포넌트 상태 캐시</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> detachedTree<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">shouldAttach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">route<span class=\"token operator\">:</span> ActivatedRouteSnapshot</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 목록 재진입 시 캐시가 있다면 true반환하여 retrieve를 호출한다</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'list'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">retrieve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">route<span class=\"token operator\">:</span> ActivatedRouteSnapshot</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 컴포넌트 상태 복원</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">shouldReuseRoute</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">future<span class=\"token operator\">:</span> ActivatedRouteSnapshot<span class=\"token punctuation\">,</span>\n    curr<span class=\"token operator\">:</span> ActivatedRouteSnapshot</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> future<span class=\"token punctuation\">.</span>routeConfig <span class=\"token operator\">===</span> curr<span class=\"token punctuation\">.</span>routeConfig\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 본문에서 설명한 RouteReuseStrategy를 상속한 커스텀 클래스를 구현하면 캐시된 컨텍스트를 복원하기 때문에 상품목록 컴포넌트가 깜빡이지 않고 곧바로 렌더링 되는 것을 볼 수 있다.</p>","frontmatter":{"categories":["development","angular"],"tags":["angular","routereusestrategy"],"title":"Angular의 RouteReuseStrategy"},"fields":{"slug":"/post/angular의-routerreusestrategy","date":"2020-02-29T00:00:00.000+09:00"},"headings":[{"value":"🚀 RouteReuseStrategy","depth":1},{"value":"RouterLink가 동작하지 않아요","depth":1},{"value":"shouldReuseRoute는 여러 번 호출된다","depth":1},{"value":"상품상세, 목록 간 컴포넌트 캐싱 예제","depth":1}]}}]}},"pageContext":{"ids":["00b84a18-10da-586d-8971-24a5774ad8ef","2f249d12-de77-5f0b-b4a2-560c9aa25d5d","d1a599fc-7122-5745-b07f-703ef178324a","373afaba-8b9f-5bdf-9bfe-f601fa725cfb"],"pageNumber":0,"humanPageNumber":1,"skip":0,"limit":10,"numberOfPages":1,"previousPagePath":"","nextPagePath":""}}}